Reflections for Lesson 3

When would you want to use a remote repository rather than keeping all your work local?
--> A remote repository is great idea when you're working on multiple computers (work, home, friend's comp) or if there are multiple people in that are working on the same project

Why might you want to always pull changes manually rather than having Git automatically stay up to date with your repository?
--> A manual pull to be up-to-date is always a good idea because you may be working on one area of the code at the same time as another person. If the changes are automatically updated, it could overwrite / present a conflict with the code that you're working on.

Describe the differences between forks, clones, and branches. When would you use one instead of the other?
--> Fork: It's like a clone of another person's repository on github. Useful when you want to edit somebody else's code as your own but don't want to alter the original repo
--> Clone: It's a copy of a repository
--> Branch: on your local computer, it's a separate thread of commits. Useful when testing out new features or editing something new separate from the main branch of code

What is the benefit of having a copy of the last known state of the remote stored locally?
--> It's good to have all of the data that you were working with available, especially when you're in a place without internet.

How would you collaorate without using Git or GitHub? What would you be easier and what would be harder?
--> Without using Git or GitHub, you would have to plan out exactly which parts of the code each member of the team is working on at any given time. This becomes difficult because people can't do work at the same time without ruining the entire project. This makes big time projects unscalable.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
--> It's always a better idea to make changes in a separate branch when you're testing out completely new features.
